trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - docs/*
    - README.md
    - _config.yml
    - Gemfile
    - Gemfile.lock
    - samples/*

variables:
  majorVersion: 2
  minorVersion: 0
  patchVersion: 0-beta18
  project: src/Lifti.Core/Lifti.Core.csproj
  testProject: test/Lifti.Tests/Lifti.Tests.csproj
  buildConfiguration: 'Release'

stages:
- stage: Build
  displayName: Build nuget packages

  jobs:
  - job: Build

    pool:
      vmImage: 'windows-latest'

    steps:   
    - task: DotNetCoreCLI@2
      displayName: "NuGet Restore"
      inputs:
        command: restore
        projects: '**/*.csproj'
    - task: DotNetCoreCLI@2
      displayName: Run unit tests
      inputs:
        command: 'test'
        projects: $(testProject)
    - task: DotNetCoreCLI@2
      displayName: Pack CI nuget version
      inputs:
        command: 'pack'
        packagesToPack: $(project)
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages/ci'
        versioningScheme: 'byPrereleaseNumber'
        majorVersion: '$(majorVersion)'
        minorVersion: '$(minorVersion)'
        patchVersion: '$(patchVersion)'
        verbosityPack: 'Normal'
        arguments: '--configuration $(buildConfiguration)'

    - task: PublishSymbols@2
      inputs:
        SearchPattern: '**/bin/**/*.pdb'
        SymbolServerType: 'TeamServices'

    - task: DotNetCoreCLI@2
      displayName: Pack release nuget version
      inputs:
        command: 'pack'
        packagesToPack: $(project)
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages/release'
        versioningScheme: 'off'
        buildProperties: 'PackageVersion=$(majorVersion).$(minorVersion).$(patchVersion)'
        verbosityPack: 'Normal'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'samples/Blazor/Blazor.csproj'
        arguments: '-o $(Build.ArtifactStagingDirectory)/blazorsample -c $(buildConfiguration)'
        zipAfterPublish: false
        modifyOutputPath: false

    - publish: '$(Build.ArtifactStagingDirectory)/blazorsample/BlazorApp/dist'
      artifact: 'blazorsample'

    - publish: '$(Build.ArtifactStagingDirectory)/packages'
      artifact: 'packages'

- stage: PublishCINugetPackage
  displayName: Publish to CI feed
  dependsOn: Build
  condition: succeeded()

  jobs:
  - job: PublishCI
    pool:
      vmImage: 'ubuntu-latest'
      
    steps:
    - checkout: none

    - download: current
      artifact: 'packages'
      
    - task: DotNetCoreCLI@2
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/packages/ci/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '21c23043-21b0-4e5a-8557-00b88fc52fd4/9f4e269d-a35a-4657-b2a3-b56b01c01f8c'

- stage: 'PublishReleaseNuGetPackage'
  displayName: 'Publish Release NuGet Package'
  dependsOn: 'PublishCINugetPackage'
  condition: succeeded()
  jobs:
  - deployment:
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'Nuget'
    strategy:
     runOnce:
       deploy:
         steps:
         - task: NuGetCommand@2
           displayName: 'Push NuGet Package'
           inputs:
             command: 'push'
             packagesToPush: '$(Pipeline.Workspace)/packages/release/*.nupkg'
             nuGetFeedType: 'external'
             publishFeedCredentials: 'NuGet'

- stage: PublishBlazorApp
  displayName: Publish Blazor sample app to blob storage
  dependsOn: 
  - Build
  condition: succeeded()

  jobs:
  - job: PublishCI
    pool:
      vmImage: 'windows-latest'
      
    steps:
    - checkout: none

    - download: current
      artifact: 'blazorsample'

    - task: AzureFileCopy@3
      inputs:
        SourcePath: '$(Pipeline.Workspace)/blazorsample'
        azureSubscription: 'GitHub Demos'
        Destination: 'AzureBlob'
        storage: 'liftidemo'
        ContainerName: '$web'
        AdditionalArgumentsForBlobCopy: /Y /S /SetContentType
